% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_kmers.R
\docType{methods}
\name{match_kmers}
\alias{match_kmers}
\alias{match_kmers,character,DNAStringSet-method}
\alias{match_kmers,character,character-method}
\alias{match_kmers,character,DNAString-method}
\alias{match_kmers,character,GenomicRanges-method}
\alias{match_kmers,character,RangedSummarizedExperiment-method}
\alias{match_kmers,numeric,ANY-method}
\alias{match_kmers,DNAStringSet,ANY-method}
\alias{match_kmers,DNAString,ANY-method}
\title{match_kmers}
\usage{
match_kmers(k, subject, ...)

\S4method{match_kmers}{character,DNAStringSet}(k, subject, genome = NULL,
  out = c("matches", "positions"), ranges = NULL)

\S4method{match_kmers}{character,character}(k, subject, out = c("matches",
  "positions"), ranges = NULL)

\S4method{match_kmers}{character,DNAString}(k, subject, out = c("matches",
  "positions"), ranges = NULL)

\S4method{match_kmers}{character,GenomicRanges}(k, subject,
  genome = BSgenome.Hsapiens.UCSC.hg19::BSgenome.Hsapiens.UCSC.hg19,
  out = c("matches", "positions"), ranges = NULL)

\S4method{match_kmers}{character,RangedSummarizedExperiment}(k, subject,
  genome = BSgenome.Hsapiens.UCSC.hg19, out = c("matches", "counts",
  "positions"), ranges = NULL)

\S4method{match_kmers}{numeric,ANY}(k, subject,
  genome = BSgenome.Hsapiens.UCSC.hg19, out = c("matches", "counts",
  "positions"), ranges = NULL)

\S4method{match_kmers}{DNAStringSet,ANY}(k, subject,
  genome = BSgenome.Hsapiens.UCSC.hg19, out = c("matches", "counts",
  "positions"), ranges = NULL)

\S4method{match_kmers}{DNAString,ANY}(k, subject,
  genome = BSgenome.Hsapiens.UCSC.hg19, out = c("matches", "counts",
  "positions"), ranges = NULL)
}
\arguments{
\item{k}{k}

\item{subject}{either \code{\link[GenomicRanges]{GenomicRanges}},
\code{\link[Biostrings]{DNAStringSet}}, \code{\link[Biostrings]{DNAString}},
or character vector}

\item{...}{additional arguments}

\item{genome}{BSgenome object, only used if subect is
\code{\link[GenomicRanges]{GenomicRanges}}}

\item{out}{what to return? see details}

\item{ranges}{if subject is not GenomicRanges, ranges to use when out is
positions}
}
\value{
SummarizedExperiment with matches assay storing which peaks contain
which kmers
}
\description{
Find kmer matches in the DNA string-based subject
}
\details{
Can either return a SummarizedExperiment with just sparse matrix
with values set to 1 for a match (if return == 'matches'),  or a
GenomicRanges  object with all the positions of matches
}
\section{Methods (by class)}{
\itemize{
\item \code{k = character,subject = DNAStringSet}: For DNAStringSet Objects

\item \code{k = character,subject = character}: For character strings

\item \code{k = character,subject = DNAString}: For DNA String objects

\item \code{k = character,subject = GenomicRanges}: For GenomicRanges

\item \code{k = character,subject = RangedSummarizedExperiment}: For RangedSummarizedExperiment (containing GRanges in rowRanges)

\item \code{k = numeric,subject = ANY}: Catch-all for other un-documented types

\item \code{k = DNAStringSet,subject = ANY}: Catch-all for other un-documented types with DNAStringSet

\item \code{k = DNAString,subject = ANY}: Catch-all for other un-documented types with DNAString
}}

\examples{

# Load very small example counts (already filtered)
data(mini_counts, package = "chromVAR")

# Get peak-kmer annotation matrix for 6mers
kmer_ix <- match_kmers(6, mini_counts)
}
\seealso{
\code{\link{get_annotations}}, \code{\link{compute_deviations}}
}

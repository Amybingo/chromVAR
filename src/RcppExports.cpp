// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ProbSampleReplace
arma::urowvec ProbSampleReplace(int size, arma::vec prob);
RcppExport SEXP chromVAR_ProbSampleReplace(SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    __result = Rcpp::wrap(ProbSampleReplace(size, prob));
    return __result;
END_RCPP
}
// bg_sample_helper
arma::umat bg_sample_helper(arma::uvec bin_membership, arma::mat bin_p, arma::vec bin_density, arma::uword niterations);
RcppExport SEXP chromVAR_bg_sample_helper(SEXP bin_membershipSEXP, SEXP bin_pSEXP, SEXP bin_densitySEXP, SEXP niterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::uvec >::type bin_membership(bin_membershipSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type bin_p(bin_pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type bin_density(bin_densitySEXP);
    Rcpp::traits::input_parameter< arma::uword >::type niterations(niterationsSEXP);
    __result = Rcpp::wrap(bg_sample_helper(bin_membership, bin_p, bin_density, niterations));
    return __result;
END_RCPP
}
// euc_dist
arma::mat euc_dist(arma::mat x);
RcppExport SEXP chromVAR_euc_dist(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    __result = Rcpp::wrap(euc_dist(x));
    return __result;
END_RCPP
}
// maha_density
double maha_density(size_t ix, arma::vec X1, arma::vec X2, arma::mat s, double w);
RcppExport SEXP chromVAR_maha_density(SEXP ixSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP sSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< size_t >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    __result = Rcpp::wrap(maha_density(ix, X1, X2, s, w));
    return __result;
END_RCPP
}
// bg_sample
arma::urowvec bg_sample(size_t ix, arma::vec X1, arma::vec X2, arma::mat s, arma::vec dens, int n, double w);
RcppExport SEXP chromVAR_bg_sample(SEXP ixSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP sSEXP, SEXP densSEXP, SEXP nSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< size_t >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dens(densSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    __result = Rcpp::wrap(bg_sample(ix, X1, X2, s, dens, n, w));
    return __result;
END_RCPP
}
// get_normalized_counts
arma::sp_mat get_normalized_counts(arma::sp_mat counts, const arma::vec expectation, const arma::rowvec fragments_per_sample);
RcppExport SEXP chromVAR_get_normalized_counts(SEXP countsSEXP, SEXP expectationSEXP, SEXP fragments_per_sampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::sp_mat >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type expectation(expectationSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type fragments_per_sample(fragments_per_sampleSEXP);
    __result = Rcpp::wrap(get_normalized_counts(counts, expectation, fragments_per_sample));
    return __result;
END_RCPP
}
// p_to_score
double p_to_score(const NumericMatrix pwm, const NumericVector bg, const double p);
RcppExport SEXP chromVAR_p_to_score(SEXP pwmSEXP, SEXP bgSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type pwm(pwmSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type bg(bgSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    __result = Rcpp::wrap(p_to_score(pwm, bg, p));
    return __result;
END_RCPP
}
// motif_match
std::vector<int> motif_match(const NumericMatrix mat, const std::vector< std::string > x, const NumericVector nuc_freqs, const double p);
RcppExport SEXP chromVAR_motif_match(SEXP matSEXP, SEXP xSEXP, SEXP nuc_freqsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::string > >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type nuc_freqs(nuc_freqsSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    __result = Rcpp::wrap(motif_match(mat, x, nuc_freqs, p));
    return __result;
END_RCPP
}
// motif_match_score
NumericVector motif_match_score(const NumericMatrix mat, const std::vector< std::string > x);
RcppExport SEXP chromVAR_motif_match_score(SEXP matSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::string > >::type x(xSEXP);
    __result = Rcpp::wrap(motif_match_score(mat, x));
    return __result;
END_RCPP
}
// pwm_euclidean
double pwm_euclidean(arma::mat mat1, arma::mat mat2);
RcppExport SEXP chromVAR_pwm_euclidean(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(pwm_euclidean(mat1, mat2));
    return __result;
END_RCPP
}
// pwm_dist_single
arma::vec pwm_dist_single(arma::mat mat1, arma::mat mat2);
RcppExport SEXP chromVAR_pwm_dist_single(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat2(mat2SEXP);
    __result = Rcpp::wrap(pwm_dist_single(mat1, mat2));
    return __result;
END_RCPP
}
// compute_pwm_dist
List compute_pwm_dist(List pwms);
RcppExport SEXP chromVAR_compute_pwm_dist(SEXP pwmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type pwms(pwmsSEXP);
    __result = Rcpp::wrap(compute_pwm_dist(pwms));
    return __result;
END_RCPP
}
